# -*- coding: utf-8 -*-
from datetime import datetime
import xml.dom.minidom as xml
import convert
import shapely.geometry as sh

def dpr(*kwargs):
    DEBUG = 1
    if DEBUG == 1:
        print(kwargs)

class gdl_gsm(object):
    def __init__(self, fname_gsm, fname_xml, fname_template):
        self.fname_gsm = fname_gsm
        self.fname_xml = fname_xml
        self._get_(fname_template)
        self.code ={'gen':[],'3d':[],'2d':[],'spec':[],'ui':[],'prm':[],'mig':[], 'rmig':[]}
        
    def _get_(self, fname_template):
        root = xml.parse(fname_template)
        root.normalize()
        self.root = root
        self.croot = root.getElementsByTagName('Symbol')[0]
        self.croot.getElementsByTagName('Author')[0].childNodes[0].nodeValue = 'PyGDL'
        dpr('Шаблон прочитан')

    def _write_(self):
        """
        Запись файла xml с последубщим конвертированием его в gsm
        """
        with open(self.fname_xml,"wb")as f:
            f.write(bytes(self.root.toxml(), 'UTF-8'))
        dpr('XML файл записан')
        self.root.unlink()
        convert.xml2gsm(self.fname_gsm, self.fname_xml)
        dpr('GSM файл создан')

    def close(self):
        """
        Запись кода во вкладки, вывод готового gsm
        """
        for t in self.code.keys():
            if len(self.code[t]):
                code = " ".join(self.code[t])
                tab = self.get_tab(t)
                tab.appendData(code)
                dpr('Код для %s добавлен' % (t))
        self._write_()

    def _value_(self, key, val, n = 1):
        t = self.croot.getElementsByTagName(key)[0]
        t.childNodes[n].nodeValue = val

    def _addcode_(self, code, key):
        self.code[key].append(code + ' \n')
        
    def _addc_(self, code, comment):
        if comment != '':
            code = code + " !-> " + comment
        return code
            
    def gen(self, code):
        """
        Добавить код в основной скрипт
        """
        self._addcode_(code, 'gen')
        
    def d2d(self, code):
        """
        Добавить код в 2d скрипт
        """
        self._addcode_(code, '2d')
        
    def d3d(self, code):
        """
        Добавить код в 3d скрипт
        """
        self._addcode_(code, '3d')

    def spec(self, code):
        """
        Добавить код в скрипт спецификаций
        """
        self._addcode_(code, 'spec')

    def param(self, code):
        """
        Добавить код в скрипт параметров
        """
        self._addcode_(code, 'prm')
        
    def set_keywords(self, keywords):
        """
        Записывает ключевые слова
        """
        self._value_('Keywords', keywords)
        dpr('Ключевые слова записаны')
        
    def set_сomment(self, сomment):
        """
        Записывает комментарии
        """
        self._value_('Comment', сomment)
        dpr('Комментарии записаны')
         
    def set_MainGUID(self, mid1, mid2):
        """
        Изменяет MainGUID объекта
        """
        if mid1:
            self._value_('Ancestry', mid1, 1)
        if mid2:
            self._value_('Ancestry', mid2, 2)
        dpr('ИД записаны')
    
    def get_tab(self, mode):
        """
        Возвращает объект вкладки
        Очишает выбранную вкладку, записывает загаловок и возвращает объект
        Ключи вкладок
        'gen' - Основной скрипт
        '3d' - 2D скрипт
        '2d' - 3D скрипт
        'spec' - Спецификации
        'ui' - Интерфейс
        'prm' - Параметры
        """
        date = datetime.strftime(datetime.now(), "%Y.%m.%d %H:%M:%S")
        header = '!-%s--\n!--generated by pygdl--\n!----------------------\n' % date
        mode_dic = {'gen':'Script_1D','3d':'Script_3D','2d':'Script_2D','spec':'Script_PR','ui':'Script_UI','prm':'Script_VL','mig':'Script_FWM', 'rmig':'Script_BWM'}
        tab = self.croot.getElementsByTagName(mode_dic[mode])[0]
        data_tab = tab.childNodes[1]
        data_tab.nodeValue = '' 
        data_tab.appendData(header)
        if mode == 'gen':
            data_tab.appendData('unID = 1')
        return data_tab      
                    
    def add(self, x, y, z, comment = ''):
        code = 'ADD %f, %f, %f' % (x, y, z)
        self.d3d(self._addc_(code, comment))
        
    def add2(self, x, y, comment = ''):	
        code = 'ADD2 %f, %f' % (x, y)
        self.d2d(self._addc_(code, comment))
        
    def addx(self, x, comment = ''):	
        code = 'ADDX %f' % (x)
        self.d3d(self._addc_(code, comment))
        
    def addy(self, x, comment = ''):	
        code = 'ADDY %f' % (x)
        self.d3d(self._addc_(code, comment))
        
    def addz(self, x, comment = ''):	
        code = 'ADDZ %f' % (x)
        self.d3d(self._addc_(code, comment))
        
    def block(self, x, y, z, comment = ''):	
        code = 'BLOCK %f, %f, %f' % (x, y, z)
        self.d3d(self._addc_(code, comment))
        
    def citcle2(self, x, y, r, comment = ''):	
        code = 'CIRCLE2 %f, %f, %f' % (x, y, r)
        self.d2d(self._addc_(code, comment))
        
    def component(self, name, quantity, unit, comment = ''):	
        code = 'COMPONENT %s, %f, %s' % (name, quantity, unit)
        self.spec(self._addc_(code, comment))
        
    def cone(self, h, r1, r2, alpha1, alpha2, comment = ''):	
        code = 'CONE %f, %f, %f, %f, %f' % (h, r1, r2, alpha1, alpha2)
        self.d3d(self._addc_(code, comment))
        
    def cylind(self, h, r, comment = ''):	
        code = 'CYLIND %f, %f' % (h, r)
        self.d3d(self._addc_(code, comment))
        
    def del_top(self, comment = ''):	
        code = 'DEL TOP'
        self.d3d(self._addc_(code, comment))
        
    def del_n(self, n, comment = ''):	
        code = 'DEL %i' % (n)
        self.d3d(self._addc_(code, comment))
        
    def hotline(self, x1, y1, z1, x2, y2, z2, comment = ''):	
        code = 'HOTLINE %f, %f, %f, %f, %f, %f, unID : unID=unID+1' % (x1, y1, z1, x2, y2, z2)
        self.d3d(self._addc_(code, comment))
    
    def hotline2(self, x1, y1, x2, y2, comment = ''):	
        code = 'HOTLINE2 %f, %f, %f, %f' % (x1, y1, x2, y2)
        self.d2d(self._addc_(code, comment))
        
    def hotspot(self, x, y, z , paramReference, flags, displayParam, comment = ''):	
        code = 'HOTSPOT %f, %f, %f, unID , %s, %i, %s : unID=unID+1' % (x, y, z , paramReference, flags, displayParam)
        self.d3d(self._addc_(code, comment))
        
    def hotspot2(self, x, y, paramReference, flags, displayParam, comment = ''):	
        code = 'HOTSPOT2 %f, %f, unID, %s, %i, %s : unID=unID+1' % (x, y, paramReference, flags, displayParam)
        self.d2d(self._addc_(code, comment))
        
    def lin_(self, x1, y1, z1, x2, y2, z2, txt, comment = ''):	
        code = 'LIN_ %f, %f, %f, %f, %f, %f' % (x1, y1, z1, x2, y2, z2)
        self.d3d(self._addc_(code, comment))
     
    def line2(self, x1, y1, x2, y2, comment = ''):
        code = 'LINE2 %f, %f, %f, %f' % (x1, y1, x2, y2)
        self.d2d(self._addc_(code, comment))
        
    def model_wire(self, comment = ''):	
        code = 'MODEL WIRE'
        self.d3d(self._addc_(code, comment))
        
    def model_surface(self, comment = ''):	
        code = 'MODEL SURFACE'
        self.d3d(self._addc_(code, comment))
        
    def model_solid(self, comment = ''):	
        code = 'MODEL SOLID'
        self.d3d(self._addc_(code, comment))
        
    def mul2(self, x, y, comment = ''):	
        code = 'MUL2 %f, %f' % (x, y)
        self.d2d(self._addc_(code, comment))
        
    def mulx(self, x, comment = ''):	
        code = 'MULX %f' % (x)
        self.d3d(self._addc_(code, comment))
        
    def muly(self, x, comment = ''):	
        code = 'MULY %f' % (x)
        self.d3d(self._addc_(code, comment))
        
    def mulz(self, x, comment = ''):	
        code = 'MULZ %f' % (x)
        self.d3d(self._addc_(code, comment))
        
    def rect2(self, x1, y1, x2, y2, comment = ''):	
        code = 'RECT2 %f, %f, %f, %f' % (x1, y1, x2, y2)
        self.d2d(self._addc_(code, comment))
        
    def rot2(self, a, comment = ''):	
        code = 'ROT2 %f' % (a)
        self.d2d(self._addc_(code, comment))
        
    def rotx(self, a, comment = ''):	
        code = 'ROTX %f' % (a)
        self.d3d(self._addc_(code, comment))
    	
    def roty(self, a, comment = ''):	
        code = 'ROTY %f' % (a)
        self.d3d(self._addc_(code, comment))
        
    def rotz(self, a, comment = ''):	
        code = 'ROTZ %f' % (a)
        self.d3d(self._addc_(code, comment))
     
    def text2(self, x1, y1, txt, comment = ''):
        code = 'TEXT2 %f, %f, "%s"' % (x1, y1, txt)
        self.d2d(self._addc_(code, comment))
    
    def define_style(self, name, font_family, size, anchor, face_code, comment = ''):
        code = 'DEFINE STYLE "%s" %s, %s, %s, %s' %(name, font_family, size, anchor, face_code)
        self.gen(self._addc_(code, comment))

    def set_style(self, name, comment = ''):
        code = 'SET STYLE "%s"' %(name)
        self.d2d(self._addc_(code, comment))

    def prism_get(self, thickness, comment = ''):
        code = 'PRISM NSP/2, %f, GET(NSP)' % (thickness)
        self.d3d(self._addc_(code, comment))    

    def project2(self, projection_code, angle, method, comment = ''):
        code = 'PROJECT2 %i, %f, %i' % (projection_code, angle, method)
        self.d2d(self._addc_(code, comment))